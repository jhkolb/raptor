// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.berkeley.cs.sdb.raptor



@SerialVersionUID(0L)
final case class Service(
    name: String = "",
    imageName: String = "",
    params: Map[String, String] = Map.empty,
    spawnpointName: String = "",
    constraints: Map[String, String] = Map.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Service] with com.trueaccord.lenses.Updatable[Service] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (name != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      if (imageName != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, imageName) }
      params.foreach(params => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(raptor.Service._typemapper_params.toBase(params).serializedSize) + raptor.Service._typemapper_params.toBase(params).serializedSize)
      if (spawnpointName != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(5, spawnpointName) }
      constraints.foreach(constraints => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(raptor.Service._typemapper_constraints.toBase(constraints).serializedSize) + raptor.Service._typemapper_constraints.toBase(constraints).serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = name
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = imageName
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
      params.foreach { __v =>
        output.writeTag(4, 2)
        output.writeUInt32NoTag(raptor.Service._typemapper_params.toBase(__v).serializedSize)
        raptor.Service._typemapper_params.toBase(__v).writeTo(output)
      };
      {
        val __v = spawnpointName
        if (__v != "") {
          output.writeString(5, __v)
        }
      };
      constraints.foreach { __v =>
        output.writeTag(6, 2)
        output.writeUInt32NoTag(raptor.Service._typemapper_constraints.toBase(__v).serializedSize)
        raptor.Service._typemapper_constraints.toBase(__v).writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): raptor.Service = {
      var __name = this.name
      var __imageName = this.imageName
      val __params = (scala.collection.immutable.Map.newBuilder[String, String] ++= this.params)
      var __spawnpointName = this.spawnpointName
      val __constraints = (scala.collection.immutable.Map.newBuilder[String, String] ++= this.constraints)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = __input.readString()
          case 18 =>
            __imageName = __input.readString()
          case 34 =>
            __params += raptor.Service._typemapper_params.toCustom(com.trueaccord.scalapb.LiteParser.readMessage(__input, raptor.Service.ParamsEntry.defaultInstance))
          case 42 =>
            __spawnpointName = __input.readString()
          case 50 =>
            __constraints += raptor.Service._typemapper_constraints.toCustom(com.trueaccord.scalapb.LiteParser.readMessage(__input, raptor.Service.ConstraintsEntry.defaultInstance))
          case tag => __input.skipField(tag)
        }
      }
      raptor.Service(
          name = __name,
          imageName = __imageName,
          params = __params.result(),
          spawnpointName = __spawnpointName,
          constraints = __constraints.result()
      )
    }
    def withName(__v: String): Service = copy(name = __v)
    def withImageName(__v: String): Service = copy(imageName = __v)
    def clearParams = copy(params = Map.empty)
    def addParams(__vs: (String, String)*): Service = addAllParams(__vs)
    def addAllParams(__vs: TraversableOnce[(String, String)]): Service = copy(params = params ++ __vs)
    def withParams(__v: Map[String, String]): Service = copy(params = __v)
    def withSpawnpointName(__v: String): Service = copy(spawnpointName = __v)
    def clearConstraints = copy(constraints = Map.empty)
    def addConstraints(__vs: (String, String)*): Service = addAllConstraints(__vs)
    def addAllConstraints(__vs: TraversableOnce[(String, String)]): Service = copy(constraints = constraints ++ __vs)
    def withConstraints(__v: Map[String, String]): Service = copy(constraints = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = imageName
          if (__t != "") __t else null
        }
        case 4 => params.map(raptor.Service._typemapper_params.toBase(_))
        case 5 => {
          val __t = spawnpointName
          if (__t != "") __t else null
        }
        case 6 => constraints.map(raptor.Service._typemapper_constraints.toBase(_))
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = raptor.Service
}

object Service extends com.trueaccord.scalapb.GeneratedMessageCompanion[Service] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Service] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): raptor.Service = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    raptor.Service(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[Seq[raptor.Service.ParamsEntry]].map(raptor.Service._typemapper_params.toCustom(_))(scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[Seq[raptor.Service.ConstraintsEntry]].map(raptor.Service._typemapper_constraints.toCustom(_))(scala.collection.breakOut)
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = RaptorProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 4 => __out = raptor.Service.ParamsEntry
      case 6 => __out = raptor.Service.ConstraintsEntry
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = raptor.Service(
  )
  @SerialVersionUID(0L)
  final case class ParamsEntry(
      key: String = "",
      value: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ParamsEntry] with com.trueaccord.lenses.Updatable[ParamsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = key
          if (__v != "") {
            output.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            output.writeString(2, __v)
          }
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): raptor.Service.ParamsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = __input.readString()
            case 18 =>
              __value = __input.readString()
            case tag => __input.skipField(tag)
          }
        }
        raptor.Service.ParamsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: String): ParamsEntry = copy(key = __v)
      def withValue(__v: String): ParamsEntry = copy(value = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = raptor.Service.ParamsEntry
  }

  object ParamsEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[ParamsEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ParamsEntry] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): raptor.Service.ParamsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      raptor.Service.ParamsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = raptor.Service.descriptor.getNestedTypes.get(0)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = raptor.Service.ParamsEntry(
    )
    implicit class ParamsEntryLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ParamsEntry]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ParamsEntry](_l) {
      def key: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: com.trueaccord.scalapb.TypeMapper[raptor.Service.ParamsEntry, (String, String)] =
      com.trueaccord.scalapb.TypeMapper[raptor.Service.ParamsEntry, (String, String)](__m => (__m.key, __m.value))(__p => raptor.Service.ParamsEntry(__p._1, __p._2))
  }

  @SerialVersionUID(0L)
  final case class ConstraintsEntry(
      key: String = "",
      value: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ConstraintsEntry] with com.trueaccord.lenses.Updatable[ConstraintsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = key
          if (__v != "") {
            output.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            output.writeString(2, __v)
          }
        };
      }
      def mergeFrom(__input: com.google.protobuf.CodedInputStream): raptor.Service.ConstraintsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = __input.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = __input.readString()
            case 18 =>
              __value = __input.readString()
            case tag => __input.skipField(tag)
          }
        }
        raptor.Service.ConstraintsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: String): ConstraintsEntry = copy(key = __v)
      def withValue(__v: String): ConstraintsEntry = copy(value = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = raptor.Service.ConstraintsEntry
  }

  object ConstraintsEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[ConstraintsEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ConstraintsEntry] = this
    def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): raptor.Service.ConstraintsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      raptor.Service.ConstraintsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = raptor.Service.descriptor.getNestedTypes.get(1)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = raptor.Service.ConstraintsEntry(
    )
    implicit class ConstraintsEntryLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ConstraintsEntry]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ConstraintsEntry](_l) {
      def key: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: com.trueaccord.scalapb.TypeMapper[raptor.Service.ConstraintsEntry, (String, String)] =
      com.trueaccord.scalapb.TypeMapper[raptor.Service.ConstraintsEntry, (String, String)](__m => (__m.key, __m.value))(__p => raptor.Service.ConstraintsEntry(__p._1, __p._2))
  }

  implicit class ServiceLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Service]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Service](_l) {
    def name: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def imageName: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.imageName)((c_, f_) => c_.copy(imageName = f_))
    def params: com.trueaccord.lenses.Lens[UpperPB, Map[String, String]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def spawnpointName: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.spawnpointName)((c_, f_) => c_.copy(spawnpointName = f_))
    def constraints: com.trueaccord.lenses.Lens[UpperPB, Map[String, String]] = field(_.constraints)((c_, f_) => c_.copy(constraints = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val IMAGENAME_FIELD_NUMBER = 2
  final val PARAMS_FIELD_NUMBER = 4
  final val SPAWNPOINTNAME_FIELD_NUMBER = 5
  final val CONSTRAINTS_FIELD_NUMBER = 6
  @transient
  private val _typemapper_params: com.trueaccord.scalapb.TypeMapper[raptor.Service.ParamsEntry, (String, String)] = implicitly[com.trueaccord.scalapb.TypeMapper[raptor.Service.ParamsEntry, (String, String)]]
  @transient
  private val _typemapper_constraints: com.trueaccord.scalapb.TypeMapper[raptor.Service.ConstraintsEntry, (String, String)] = implicitly[com.trueaccord.scalapb.TypeMapper[raptor.Service.ConstraintsEntry, (String, String)]]
}
