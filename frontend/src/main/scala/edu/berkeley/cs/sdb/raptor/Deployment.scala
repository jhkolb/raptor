// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.berkeley.cs.sdb.raptor



@SerialVersionUID(0L)
final case class Deployment(
    entity: String = "",
    spawnpointUris: Seq[String] = Nil,
    externalDeps: Seq[String] = Nil,
    services: Seq[raptor.Service] = Nil,
    topology: Seq[raptor.Link] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Deployment] with com.trueaccord.lenses.Updatable[Deployment] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (entity != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, entity) }
      spawnpointUris.foreach(spawnpointUris => __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, spawnpointUris))
      externalDeps.foreach(externalDeps => __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, externalDeps))
      services.foreach(services => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(services.serializedSize) + services.serializedSize)
      topology.foreach(topology => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(topology.serializedSize) + topology.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = entity
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      spawnpointUris.foreach { __v =>
        output.writeString(2, __v)
      };
      externalDeps.foreach { __v =>
        output.writeString(3, __v)
      };
      services.foreach { __v =>
        output.writeTag(4, 2)
        output.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(output)
      };
      topology.foreach { __v =>
        output.writeTag(5, 2)
        output.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(output)
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): raptor.Deployment = {
      var __entity = this.entity
      val __spawnpointUris = (scala.collection.immutable.Vector.newBuilder[String] ++= this.spawnpointUris)
      val __externalDeps = (scala.collection.immutable.Vector.newBuilder[String] ++= this.externalDeps)
      val __services = (scala.collection.immutable.Vector.newBuilder[raptor.Service] ++= this.services)
      val __topology = (scala.collection.immutable.Vector.newBuilder[raptor.Link] ++= this.topology)
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __entity = __input.readString()
          case 18 =>
            __spawnpointUris += __input.readString()
          case 26 =>
            __externalDeps += __input.readString()
          case 34 =>
            __services += com.trueaccord.scalapb.LiteParser.readMessage(__input, raptor.Service.defaultInstance)
          case 42 =>
            __topology += com.trueaccord.scalapb.LiteParser.readMessage(__input, raptor.Link.defaultInstance)
          case tag => __input.skipField(tag)
        }
      }
      raptor.Deployment(
          entity = __entity,
          spawnpointUris = __spawnpointUris.result(),
          externalDeps = __externalDeps.result(),
          services = __services.result(),
          topology = __topology.result()
      )
    }
    def withEntity(__v: String): Deployment = copy(entity = __v)
    def clearSpawnpointUris = copy(spawnpointUris = Seq.empty)
    def addSpawnpointUris(__vs: String*): Deployment = addAllSpawnpointUris(__vs)
    def addAllSpawnpointUris(__vs: TraversableOnce[String]): Deployment = copy(spawnpointUris = spawnpointUris ++ __vs)
    def withSpawnpointUris(__v: Seq[String]): Deployment = copy(spawnpointUris = __v)
    def clearExternalDeps = copy(externalDeps = Seq.empty)
    def addExternalDeps(__vs: String*): Deployment = addAllExternalDeps(__vs)
    def addAllExternalDeps(__vs: TraversableOnce[String]): Deployment = copy(externalDeps = externalDeps ++ __vs)
    def withExternalDeps(__v: Seq[String]): Deployment = copy(externalDeps = __v)
    def clearServices = copy(services = Seq.empty)
    def addServices(__vs: raptor.Service*): Deployment = addAllServices(__vs)
    def addAllServices(__vs: TraversableOnce[raptor.Service]): Deployment = copy(services = services ++ __vs)
    def withServices(__v: Seq[raptor.Service]): Deployment = copy(services = __v)
    def clearTopology = copy(topology = Seq.empty)
    def addTopology(__vs: raptor.Link*): Deployment = addAllTopology(__vs)
    def addAllTopology(__vs: TraversableOnce[raptor.Link]): Deployment = copy(topology = topology ++ __vs)
    def withTopology(__v: Seq[raptor.Link]): Deployment = copy(topology = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = entity
          if (__t != "") __t else null
        }
        case 2 => spawnpointUris
        case 3 => externalDeps
        case 4 => services
        case 5 => topology
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = raptor.Deployment
}

object Deployment extends com.trueaccord.scalapb.GeneratedMessageCompanion[Deployment] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Deployment] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): raptor.Deployment = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    raptor.Deployment(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[Seq[String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[Seq[String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[Seq[raptor.Service]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[Seq[raptor.Link]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = RaptorProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 4 => __out = raptor.Service
      case 5 => __out = raptor.Link
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = raptor.Deployment(
  )
  implicit class DeploymentLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Deployment]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Deployment](_l) {
    def entity: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.entity)((c_, f_) => c_.copy(entity = f_))
    def spawnpointUris: com.trueaccord.lenses.Lens[UpperPB, Seq[String]] = field(_.spawnpointUris)((c_, f_) => c_.copy(spawnpointUris = f_))
    def externalDeps: com.trueaccord.lenses.Lens[UpperPB, Seq[String]] = field(_.externalDeps)((c_, f_) => c_.copy(externalDeps = f_))
    def services: com.trueaccord.lenses.Lens[UpperPB, Seq[raptor.Service]] = field(_.services)((c_, f_) => c_.copy(services = f_))
    def topology: com.trueaccord.lenses.Lens[UpperPB, Seq[raptor.Link]] = field(_.topology)((c_, f_) => c_.copy(topology = f_))
  }
  final val ENTITY_FIELD_NUMBER = 1
  final val SPAWNPOINTURIS_FIELD_NUMBER = 2
  final val EXTERNALDEPS_FIELD_NUMBER = 3
  final val SERVICES_FIELD_NUMBER = 4
  final val TOPOLOGY_FIELD_NUMBER = 5
}
