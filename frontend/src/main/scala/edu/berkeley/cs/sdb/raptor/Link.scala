// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.berkeley.cs.sdb.raptor



@SerialVersionUID(0L)
final case class Link(
    src: String = "",
    dest: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Link] with com.trueaccord.lenses.Updatable[Link] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (src != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, src) }
      if (dest != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, dest) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = src
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = dest
        if (__v != "") {
          output.writeString(2, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): raptor.Link = {
      var __src = this.src
      var __dest = this.dest
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __src = __input.readString()
          case 18 =>
            __dest = __input.readString()
          case tag => __input.skipField(tag)
        }
      }
      raptor.Link(
          src = __src,
          dest = __dest
      )
    }
    def withSrc(__v: String): Link = copy(src = __v)
    def withDest(__v: String): Link = copy(dest = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = src
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = dest
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = raptor.Link
}

object Link extends com.trueaccord.scalapb.GeneratedMessageCompanion[Link] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Link] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): raptor.Link = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    raptor.Link(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = RaptorProto.descriptor.getMessageTypes.get(1)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = raptor.Link(
  )
  implicit class LinkLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Link]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Link](_l) {
    def src: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.src)((c_, f_) => c_.copy(src = f_))
    def dest: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.dest)((c_, f_) => c_.copy(dest = f_))
  }
  final val SRC_FIELD_NUMBER = 1
  final val DEST_FIELD_NUMBER = 2
}
